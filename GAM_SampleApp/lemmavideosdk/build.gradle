plugins {
    id 'maven-publish'
    alias(libs.plugins.android.library)

}
def versionTag

android {
    namespace 'com.lemma.lemmavideosdk'
    compileSdkVersion 34
//    buildToolsVersion '25.0.0'
    versionTag = project.hasProperty('version') ? project['version'] : '1.0.0'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 1
        versionName versionTag
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.12'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.liulishuo.filedownloader:library:1.7.5'
}
publishing {
    publications {
        aar(MavenPublication) {
            groupId = 'com.lemma.lemmavideosdk'
            artifactId = 'lemmavideosdk'
            version = versionTag

            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            pom {
                name = 'lemmavideosdk'
                description = 'SDK for GAM sample app'
                url = 'https://github.com/lm-sushant-deshpande/lm-gam-mediation'

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    configurations.implementation.allDependencies.each { dep ->
                        if (dep.group != null && dep.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }

                    configurations.api.allDependencies.each { dep ->
                        if (dep.group != null && dep.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }

                    configurations.runtimeOnly.allDependencies.each { dep ->
                        if (dep.group != null && dep.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url project.findProperty("mavenUrl") ?: ""
            credentials {
                username = project.findProperty("nexusUsername") ?: ""
                password = project.findProperty("nexusPassword") ?: ""
            }
        }
    }
}

task printAarPath {
    doLast {
        def aarFile = file("$buildDir/outputs/aar/${project.name}-release.aar")
        if (aarFile.exists()) {
            println "AAR file path: ${aarFile.absolutePath}"
        } else {
            println "AAR file does not exist at ${aarFile.absolutePath}"
        }
    }
}

tasks.named('publishAarPublicationToMavenRepository').configure {
    dependsOn tasks.named('bundleReleaseAar')
    dependsOn printAarPath
}
